/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.micromanager.plugins.PatternedLight;

import ij.process.ImageProcessor;
import java.awt.geom.Point2D;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.table.AbstractTableModel;
import mmcorej.CMMCore;
import mmcorej.DeviceType;
import mmcorej.StrVector;
import org.micromanager.MultiStagePosition;
import org.micromanager.PositionList;
import org.micromanager.Studio;
import org.micromanager.acquisition.SequenceSettings;
import org.micromanager.data.Coords;
import org.micromanager.data.Datastore;
import org.micromanager.data.Image;
import org.micromanager.data.Pipeline;
import org.micromanager.data.internal.DefaultCoords;
import org.micromanager.data.internal.DefaultDatastore;
import org.micromanager.display.DataViewer;
import org.micromanager.internal.positionlist.utils.TileCreator;
import org.micromanager.internal.positionlist.utils.ZGenerator;
import org.micromanager.internal.utils.MMFrame;

/**
 *
 * @author BillBill
 */
public class PatternedLightGUI extends MMFrame {

    /**
     * Creates new form PatternedLightGUI
     */
    private Studio studio_;
    private String XYstageName;
    private String ZstageName;  
    private AxisList axisList_;
    private TileCreator tileCreator;
    private double totalDx, totalDy, totalDz;
    private int counter = 0;
    private int n = 0;
    private DefaultListModel<String> _listModel;
    private CMMCore mmc;
    public PatternedLightGUI(Studio studio){
        super("PatternedLightFrame Plugin GUI");
        studio_ = studio;        
        mmc = studio_.core();
        initComponents();
        _listModel = new DefaultListModel<String>();    
        jList_PositionList.setModel(_listModel);
        XYstageName = mmc.getXYStageDevice();        
        ZstageName = mmc.getFocusDevice();        
        studio_.events().registerForEvents(this);       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton_add = new javax.swing.JButton();
        jButton_Remove = new javax.swing.JButton();
        jLabel_Status = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_PositionList = new javax.swing.JList<>();
        jButton_Clear = new javax.swing.JButton();
        jButton_Stitch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton_add.setText("Add");
        jButton_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addActionPerformed(evt);
            }
        });

        jButton_Remove.setText("Remove");
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });

        jLabel_Status.setText("Add Top Left corner position");

        jScrollPane1.setViewportView(jList_PositionList);

        jButton_Clear.setText("Clear");
        jButton_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton_add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Remove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_Clear)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_add)
                    .addComponent(jButton_Remove)
                    .addComponent(jButton_Clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_Status, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        jButton_Stitch.setText("Start Stitch");
        jButton_Stitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_StitchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_Stitch)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jButton_Stitch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    class acqThread extends Thread {
        @Override
	public void run() {
            //Move the Stage and Focus
            ArrayList<Image> img = new ArrayList<Image>();
            ArrayList<ImageProcessor> ip = new ArrayList<ImageProcessor>();
            SequenceSettings currSettings = studio_.acquisitions().getAcquisitionSettings();
            currSettings.usePositionList = true;
            currSettings.numFrames = 1;
            studio_.acquisitions().setAcquisitionSettings(currSettings);
            Datastore data = studio_.acquisitions().runAcquisition();

//            try {       
//                
//                for(int i=0; i < studio_.positions().getPositionList().getNumberOfPositions(); i++){                
//                    MultiStagePosition tempPos = studio_.positions().getPositionList().getPosition(i);
//
//                    mmc.waitForDevice(XYstageName);
//                    System.out.println(i+" "+tempPos.getX() + " " + tempPos.getY());
//                    mmc.setXYPosition(XYstageName, tempPos.getX(), tempPos.getY());
//
//                    mmc.waitForDevice(ZstageName);
//                    mmc.setPosition(tempPos.getZ());      
//                    System.out.println(tempPos.getZ());
//
//                    mmc.waitForDevice(mmc.getCameraDevice());
//                    mmc.waitForImageSynchro();
//                    img.addAll(studio_.live().snap(true));
//
//                    jLabel_Status.setText("Progress: "+ (int)(i+1)+ "/"+ studio_.positions().getPositionList().getNumberOfPositions() + " Images taken.");
//                    ip.add(studio_.data().ij().createProcessor(img.get(i)));
//                }                         
//                
//                studio_.album().addImages(img);
//                //studio_.album().getDatastore().save(Datastore.SaveMode.MULTIPAGE_TIFF, "C:\\haha");
//            } catch (Exception ex) {
//                    Logger.getLogger(PatternedLightGUI.class.getName()).log(Level.SEVERE, null, ex);
//            }        
        }
    }
       //From PositionListDlg  
    private class AxisData {
      private boolean use_;
      private final String axisName_;
      
      public AxisData(boolean use, String axisName) {
         use_ = use;
         axisName_ = axisName;
      }
      public boolean getUse() {return use_;}
      public String getAxisName() {return axisName_;}  
      public void setUse(boolean use) {use_ = use;}
   }
    
    //From PositionListDlg
    public class AxisList {
      private ArrayList<AxisData> axisList_;
      
      public AxisList() {
         this.axisList_ = new ArrayList<AxisData>();
         // Initialize the axisList.
         try {
            // add 1D stages
            StrVector stages = mmc.getLoadedDevicesOfType(DeviceType.StageDevice);
            for (int i=0; i<stages.size(); i++) {
               axisList_.add(new AxisData(true, stages.get(i)));
            }
         } catch (Exception e) {
            
         }
      }
      private AxisData get(int i) {
         if (i >=0 && i < axisList_.size()) {
            return axisList_.get(i);
         }
         return null;
      }
      private int getNumberOfPositions() {
         return axisList_.size();
      }
      public boolean use(String axisName) {
         for (int i=0; i< axisList_.size(); i++) {
            if (axisName.equals(get(i).getAxisName())) {
               return get(i).getUse();
            }
         }
         // not in the list??  It might be time to refresh the list.  
         return true;
      }         
   }
    
    //From PositionListDlg
    private class AxisTableModel extends AbstractTableModel {
      private boolean isEditable_ = true;
      public final String[] COLUMN_NAMES = new String[] {
            "Use",
            "Axis"
      };
      
      @Override
      public int getRowCount() {
         return axisList_.getNumberOfPositions();
      }
      @Override
      public int getColumnCount() {
         return COLUMN_NAMES.length;
      }
      @Override
      public String getColumnName(int columnIndex) {
         return COLUMN_NAMES[columnIndex];
      }
      @Override
      public Object getValueAt(int rowIndex, int columnIndex) {
         AxisData aD = axisList_.get(rowIndex);
         if (aD != null) {
            if (columnIndex == 0) {
               return aD.getUse();
            } else if (columnIndex == 1) {
               return aD.getAxisName();
            }
         }
         return null;
      }
      @Override
      public Class<?> getColumnClass(int c) {
         return getValueAt(0, c).getClass();
      }
      public void setEditable(boolean state) {
         isEditable_ = state;
         if (state) {
            for (int i=0; i < getRowCount(); i++) {
               
            }
         }
      }
      @Override
      public boolean isCellEditable(int rowIndex, int columnIndex) {
         if (columnIndex == 0) {
            return isEditable_;
         }
         return false;
      }
      @Override
      public void setValueAt(Object value, int rowIndex, int columnIndex) {
         if (columnIndex == 0) {
            axisList_.get(rowIndex).setUse( (Boolean) value);
           // prefs_.putBoolean(axisList_.get(rowIndex).getAxisName(), (Boolean) value); 
         }
         fireTableCellUpdated(rowIndex, columnIndex);
//         axisTable_.clearSelection();
      }
   }
    private void jButton_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addActionPerformed
        // Ask for the Top Left and Lower Right Coordinate of the Stitching image          
        try {             
             Point2D.Double xyPos = mmc.getXYStagePosition();
             MultiStagePosition currentPos = new MultiStagePosition(XYstageName, xyPos.x, xyPos.y, ZstageName, mmc.getPosition(ZstageName));
             studio_.positions().getPositionList().addPosition(currentPos);             
             n++;
             String text = currentPos.getX() +", "+ currentPos.getY() + ", " + currentPos.getZ();
             _listModel.addElement(text);             
             
         } catch (Exception ex) {
             Logger.getLogger(PatternedLightGUI.class.getName()).log(Level.SEVERE, null, ex);
         }
        if(n == 1){
            jLabel_Status.setText("Please add the top right position!");
        }
        if(n == 2){
            jLabel_Status.setText("Please add the bottom right position!");            
        }
        else if(n == 3){
            
//            ZGenerator.Type zGenType = ZGenerator.Type.SHEPINTERPOLATE;
//            StrVector zStages = new StrVector();
//            for (int axNum=0; axNum<axisList_.getNumberOfPositions(); axNum++){
//                AxisData ad = axisList_.get(axNum);
//                if (ad.getUse()){
//                    zStages.add(ad.getAxisName());
//                }
//            }
//            double overlap = 0;
//            double pixelSizeUm = mmc.getPixelSizeUm(); 
//            studio_.positions().setPositionList(
//                tileCreator.createTiles(
//                    overlap,
//                    TileCreator.OverlapUnitEnum.UM,
//                    studio_.positions().getPositionList().getPositions(),
//                    pixelSizeUm,
//                    "1",
//                    XYstageName,
//                    zStages,
//                    zGenType
//                )                    
//            );
            
            PositionList PositionList = studio_.positions().getPositionList(); 
            totalDx = PositionList.getPosition(n-1).getX() - PositionList.getPosition(0).getX();
            totalDy = PositionList.getPosition(n-1).getY() - PositionList.getPosition(0).getY();      
            totalDz = PositionList.getPosition(n-1).getZ() - PositionList.getPosition(0).getZ();   
            //Dividing the selected area into tiles
            double pixel2um = mmc.getPixelSizeUm();
            double dX = mmc.getImageWidth() * pixel2um, dY = mmc.getImageHeight() * pixel2um;            
            
            int numOfCol = (int)Math.ceil(totalDx / dX), numOfRow = (int)Math.ceil(totalDy / dY);       
            double XdZ = (PositionList.getPosition(n-2).getZ() 
                       - PositionList.getPosition(0).getZ() ) / numOfCol;
            double YdZ = (PositionList.getPosition(n-1).getZ() 
                       - PositionList.getPosition(n-2).getZ() ) / numOfRow;
            
            PositionList tempPos = new PositionList();            
            double FirstPosX = PositionList.getPosition(0).getX(), 
                   FirstPosY = PositionList.getPosition(0).getY(), 
                   FirstPosZ = PositionList.getPosition(0).getZ();
            for(int j=0; j <= numOfRow; j++){            
                for(int i=0; i <= numOfCol;i++){                                     
                    tempPos.addPosition(new MultiStagePosition(XYstageName, FirstPosX + dX * i, FirstPosY + dY * j, ZstageName, FirstPosZ + XdZ * i + YdZ *j ));
                    tempPos.setLabel(tempPos.getNumberOfPositions()-1, "("+i+" "+j+")");   
                }
            }
            PositionList.setPositions(tempPos.getPositions());
            _listModel.removeAllElements();
            for(int i=0; i<PositionList.getNumberOfPositions(); i++){
                String text = PositionList.getPosition(i).getX() +", " 
                        + PositionList.getPosition(i).getY() + ", " 
                        + PositionList.getPosition(i).getZ();
                 _listModel.addElement(text);             
            }
            jLabel_Status.setText("Ready to hit the Stitch Image.");
        }
    }//GEN-LAST:event_jButton_addActionPerformed

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed
        if(studio_.positions().getPositionList().getNumberOfPositions()> 0){
            studio_.positions().getPositionList().removePosition(jList_PositionList.getSelectedIndex());
            _listModel.remove(jList_PositionList.getSelectedIndex());    
            jList_PositionList.updateUI();
        }            
        if(n > 0)
            n--;            
        else 
            jButton_RemoveActionPerformed(evt);       
    }//GEN-LAST:event_jButton_RemoveActionPerformed

    private void jButton_StitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_StitchActionPerformed
       acqThread stitching = new acqThread();
       stitching.start();        
    }//GEN-LAST:event_jButton_StitchActionPerformed

    private void jButton_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearActionPerformed
        studio_.positions().getPositionList().clearAllPositions();
        _listModel.removeAllElements();
        jList_PositionList.removeAll();
        n = 0;
        totalDx = 0;
        totalDy = 0;
        totalDz = 0;
        jList_PositionList.updateUI();
    }//GEN-LAST:event_jButton_ClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Clear;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JButton jButton_Stitch;
    private javax.swing.JButton jButton_add;
    private javax.swing.JLabel jLabel_Status;
    private javax.swing.JList<String> jList_PositionList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
